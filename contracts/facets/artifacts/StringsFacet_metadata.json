{
	"compiler": {
		"version": "0.7.3+commit.9bfce1f6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "_values",
						"type": "uint256[]"
					}
				],
				"name": "TransferBatch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "TransferSingle",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_value",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "URI",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOfAll",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "balances_",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_owners",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					}
				],
				"name": "balanceOfBatch",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "balances_",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeBatchTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_value",
						"type": "string"
					}
				],
				"name": "setBaseURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupplies",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "totalSupplies_",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalSupply_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "uri",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"balanceOf(address,uint256)": {
					"params": {
						"_id": "ID of the token",
						"_owner": "The address of the token holder"
					},
					"returns": {
						"balance_": "The _owner's balance of the token type requested"
					}
				},
				"balanceOfBatch(address[],uint256[])": {
					"params": {
						"_ids": "ID of the tokens",
						"_owners": "The addresses of the token holders"
					},
					"returns": {
						"balances_": "The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)"
					}
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"_operator": "Address of authorized operator",
						"_owner": "The owner of the tokens"
					},
					"returns": {
						"_0": "True if the operator is approved, false if not"
					}
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
					"details": "Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error.         MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).                      ",
					"params": {
						"_data": "Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`",
						"_from": "Source address",
						"_ids": "IDs of each token type (order and length must match _values array)",
						"_to": "Target address",
						"_values": "Transfer amounts per token type (order and length must match _ids array)"
					}
				},
				"safeTransferFrom(address,address,uint256,uint256,bytes)": {
					"details": "Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).        ",
					"params": {
						"_data": "Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`",
						"_from": "Source address",
						"_id": "ID of the token type",
						"_to": "Target address",
						"_value": "Transfer amount"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "MUST emit the ApprovalForAll event on success.",
					"params": {
						"_approved": "True if the operator is approved, false to revoke approval",
						"_operator": "Address to add to the set of authorized operators"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"balanceOf(address,uint256)": {
					"notice": "Get the balance of an account's tokens."
				},
				"balanceOfBatch(address[],uint256[])": {
					"notice": "Get the balance of multiple account/token pairs"
				},
				"isApprovedForAll(address,address)": {
					"notice": "Queries the approval status of an operator for a given owner."
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
					"notice": "Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call)."
				},
				"safeTransferFrom(address,address,uint256,uint256,bytes)": {
					"notice": "Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call)."
				},
				"setApprovalForAll(address,bool)": {
					"notice": "Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/facets/StringsFacet.sol": "StringsFacet"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/facets/StringsFacet.sol": {
			"keccak256": "0x0fd9fa6fd61a4ccc64117ef42ba082d32064a9752503eca68468630761e379c1",
			"license": "MIT",
			"urls": [
				"bzz-raw://249506ec6a8659c3e638aaffa704154670b9b4d6f8a8c69ef4f2c258deb4aa75",
				"dweb:/ipfs/QmQyLeSYjRTUPCmD4MtjJSjZJDq9FKwC3diwMdZ6faEtqL"
			]
		},
		"localhost/contracts/interfaces/IDiamondCut.sol": {
			"keccak256": "0xc4afba429c6da2a779900b022ae6cb14d2e32299496d61d3348019b97f391373",
			"license": "MIT",
			"urls": [
				"bzz-raw://4292413859e7e7353c676f210884ffea26d5528b40e22cc5d0ccd21db250f248",
				"dweb:/ipfs/QmV5qTNH4R56k31NcUw8xZdSStjDFZkm3C1kQkBAQVrheG"
			]
		},
		"localhost/contracts/interfaces/IERC1155.sol": {
			"keccak256": "0xad76c6e4a7a8e6246efd561a9afce045ee4d793b0ac31a087f5bd5d70a4c59fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://c66d7fe1b485a08732e2c389409a39240f837beec16df080cc0f9850db5bf729",
				"dweb:/ipfs/QmVuL2EGQpPdmsSkKKHxuQFRriGSxtd36QiL3Mu9xyG2BF"
			]
		},
		"localhost/contracts/interfaces/IERC1155TokenReceiver.sol": {
			"keccak256": "0x4a29a36d4021196fd73b478e8b7e8bcaa4680bfe31c878f2ec892c1f973c7205",
			"license": "MIT",
			"urls": [
				"bzz-raw://66f1958c8e5f5165317127771ccd47a3ca7eb3153ee26fd6dc7c3ed27992c04a",
				"dweb:/ipfs/QmQcSXtWhQfeXuemsSfowBgfVSor9sKHgQUaWFHxym9B1Q"
			]
		},
		"localhost/contracts/libraries/AppStorage.sol": {
			"keccak256": "0x7a9ab0808c48844d7a0015df621bd68a201fab41622cea1f1acbfd5612411296",
			"license": "MIT",
			"urls": [
				"bzz-raw://08d8f6afbee706220b65cf94362abd66f4bf6cd26378b6444ddc17105ff9b995",
				"dweb:/ipfs/QmTnX9uSdDfMmxXp9USkvkHwVxEmecReBiueQmBpwd52Zu"
			]
		},
		"localhost/contracts/libraries/LibDiamond.sol": {
			"keccak256": "0xdc80cc36a0cd7a0f90ebd07a4ac45c5401b9fee5f4601741b02caf0131657bba",
			"license": "MIT",
			"urls": [
				"bzz-raw://db82b541128e18f931a51b2032c866a929f06e275e828297cc5034f5edff937d",
				"dweb:/ipfs/QmTXDs2Hw9gpMJHeQcCp76MC8D7VT8MNmbDVc4Z6peBkpR"
			]
		},
		"localhost/contracts/libraries/LibStrings.sol": {
			"keccak256": "0xa04aee048ce86c49386db5ece187f776596bd245135f9051386d734ad87bff31",
			"license": "MIT",
			"urls": [
				"bzz-raw://d8508193b680a5578e7b3e58294a476481405a17bc762c287cb90acf592c32a4",
				"dweb:/ipfs/QmUaEXP3mE1GwoYVyNRHt8SPdhwffFw4Po4cUsBBEyuRo8"
			]
		}
	},
	"version": 1
}